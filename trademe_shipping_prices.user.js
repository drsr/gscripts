// ==UserScript==
// @name       TradeMe shipping prices
// @namespace  http://drsr/
// @version    0.9.9
// @description  Show shipping price and seller on search results in detail mode
// @include    https://www.trademe.co.nz/*
// @require    http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
// @grant      none
// @copyright  public domain
// ==/UserScript==
// v0.9.6: Yet another new listing details page format, remove car stuff as not really interested, no need for thumbnail fetch any more
// v0.9.5: Update for new listing details page format
// v0.9.4: Support new listing details page format
// v0.9.3: Don't run on property pages
// v0.9.2: Changes for Greasemonkey 2.0
// v0.9: TM moved the seller name
// v0.8: Tweaks to car details in search results in cases where TM already provides them
// v0.7: Add kilometres, engine size etc. to car search results if available
// v0.6: Add (NPU) if seller does not allow pickups
// v0.5: Fetch thumbnail image for non-gallery items, if another script has not already fetched it
// v0.4: show seller for classifieds and Motors too
// TODO:
// Hover to show full list of shipping prices
// Style to match buynow colour
// Better guess at correct price for user's region (needs to handle "North Island", "South Island", "Auckland" etc)
// Option to pick rural shipping

// replace trademe's JS error handler
window.onerror=function(msg, url, linenumber){
    console.log('Error message: '+msg+'\nURL: '+url+'\nLine Number: '+linenumber);
        return true;
};

// make sure the JQuery is the one loaded by the @require
var myJQ = jQuery.noConflict();
var processingCards = false;
var pageGets = [];

function addShipping(card, listing) {
    // .custom-shipping-price is new layout, #ShippingDetails_FreeShipping etc. are for items that only have this in the shipping list
    var shippingFirst = myJQ("#AuctionSaleDetail_ShippingDetailsList li:first,.custom-shipping-price:first,,#shipping-options tbody tr:first,#ShippingDetails_FreeShipping,#ShippingDetails_MustPickup,#ShippingDetails_ToBeArranged", listing).text();
    if (shippingFirst) {
        console.log("Shipping price " + shippingFirst);
        // \xa0 is character generated by &nbsp;
        var shippingPrice = shippingFirst.split("\xa0",2)[0];
        // abbreviate longer shipping descriptions to avoid disrupting columns too badly
        shippingPrice = shippingPrice.replace("To be arranged", "TBA")
        .replace("TBA  N/A", "TBA")
        .replace("Free shipping within New Zealand", "Free")
        .replace("Free  Free", "Free")
        .replace("Buyer must pick-up", "Pick-up");
        var noPickups = myJQ("#AuctionSaleDetail_ShippingDetailsList li:contains('does not allow pick-ups'),.shipping-details-list li:contains('does not allow pick-ups'),#shipping-options p:contains('does not allow pick-ups')", listing).length > 0;
        if (noPickups) {
            shippingPrice += "&nbsp;(NPU)";
        }
        // Some old-format items only have a buy now, not a bid price. New format has same class on both prices
        var priceLocation = myJQ(".listingBidPrice,.tm-marketplace-search-card__price", card);
        // Start=reserve with same buy-now price has the listingBidPrice present but hidden!
        if (priceLocation.length == 0 || priceLocation.parent().hasClass("nobidding")) {
            // add after "Buy now" text and make div wider to fit
            priceLocation = myJQ(".listingBuyNowText", card);
            if (priceLocation.length != 0) {
                priceLocation.css("width", "190px");
                myJQ(priceLocation[0]).append('<span class="tmsp_shipping"> + '+shippingPrice+'</span>')
            }
        } else {
            myJQ(priceLocation[0]).append('<span class="tmsp_shipping">+'+shippingPrice+'</span>');
        }
    } else {
    	console.log("didn't find shipping list");
    }
}

function findListingLocation(card) {
    var listingLocation = myJQ(".location,#-region", card);
    if (listingLocation.length==0) {
        listingLocation = myJQ('div[id $= "_listingLocation"]', card); // Motors
    }
    return listingLocation;
}

function addSeller(card, listing) {
    // add the seller name with link before the listing location
    var seller = myJQ("#AuctionSaleDetail_MemberText a:first", listing);
    if (seller.length == 0) {
        seller = myJQ("#ClassifiedActions_SellerStats a:first", listing);
    }
    if (seller.length == 0) {
        seller = myJQ("#ClassifiedActions_DealerNameLinkDiv a:first", listing); // Motors
    }
    if (seller.length == 0) {
        seller = myJQ("#ClassifiedActions_DealerName", listing).text(); // Motors
    }
    if (seller.length == 0) {
        seller = myJQ(".member-summary-box h3", listing).text().trim(); // New format
    }
    if (seller && seller.length > 0) {
        findListingLocation(card).prepend(",&nbsp;").prepend(seller);
    }
}

function addStyle(style) {
	myJQ("<style>").prop("type", "text/css").html(style).appendTo("head");
}

function isPropertyPage() {
	var firstBreadCrumb = myJQ("#mainContent .site-breadcrumbs a:first, #mainContent .category-listings-breadcrumbs a:first");
	if (firstBreadCrumb.length == 0) {
		// "Properties from this office" page
		firstBreadCrumb = myJQ("#BreadCrumbsStore_BreadcrumbsContainer a:first");
	}
	var isPropertySearchResult = firstBreadCrumb.text().indexOf("Property") != -1;
	return isPropertySearchResult;
}

if (isPropertyPage()) {
    console.log("tmsp: property page");
    // script doesn't anything useful to the property pages and causes jQuery to fetch loads of images for some reason
    return;
}

function addShippingPrices() {
    if (pageGets.length==0) {
        myJQ(".largelist,.o-card").each(function(index, card){
            if(myJQ(".tmsp_shipping",card).length==0) {
                var auctionUrl = myJQ("a", card).attr('href');
                if (auctionUrl) {
                    auctionUrl = auctionUrl.split('?')[0];
                    console.log("loading " + auctionUrl);
                    pageGets.push(
                        myJQ.get(auctionUrl, function(listing) {
                            console.log("processing " + auctionUrl);
                            addShipping(card, listing);
                            addSeller(card, listing);
                        }));
                }
            }
        });
    }
    myJQ.when.apply(null,pageGets).then(function() {
        pageGets = []
    });
}

addStyle(".tmsp_shipping {font-size:11px; font-style: italic;}");

window.setInterval(addShippingPrices, 2000);